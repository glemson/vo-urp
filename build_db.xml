<!-- 
    build_db.xml file : specific targets for database management
-->  


<!-- presets -->

<!-- Performs an SQL query with the database defined in jpa-config.properties. -->
<presetdef name="doSqlTarget">

  <sql classpathref="jdbc-drivers.class.path" 
       driver="${targetdb.driver}"
       url="${targetdb.url}"
       userid="${targetdb.admin}"
       password="${targetdb.adminpassword}" />

</presetdef>

<presetdef name="doSqlAdminLoadCLOB">
  <sql classpathref="jdbc-drivers.class.path"
       driver="${admindb.driver}"
       url="${admindb.url}"
       userid="${admindb.admin}"
       password="${admindb.adminpassword}" />

</presetdef>

<presetdef name="doSqlAdminReadCLOB">

  <sql classpathref="jdbc-drivers.class.path" 
       driver="${admindb.driver}"
       url="${admindb.url}"
       userid="${admindb.admin}"
       password="${admindb.adminpassword}" />

</presetdef>



<!-- Performs an SQL query with the admin roles database defined in ${input}/project.properties -->
<presetdef name="doSqlAdmindb">

  <sql classpathref="jdbc-drivers.class.path"
       driver="${admindb.driver}"
       url="${admindb.url}"
       userid="${admindb.admin}"
       password="${admindb.adminpassword}" />

</presetdef>


<!-- targets -->

<!-- sets DB properties -->
<target name="initForDB">
  <!-- Get jpa-config properties -->
  <property file="${properties}/jpa-config.properties" />

  <fail unless="eclipselink.target-database"    message="Must define property 'eclipselink.target-database' in jpa-config.properties !" />

  <fail unless="targetdb.driver"        message="Must define property 'eclipselink.jdbc.driver' in jpa-config.properties !" />
  <fail unless="targetdb.url"           message="Must define property 'eclipselink.jdbc.url' in jpa-config.properties !" />

  <!-- eclipselink.jdbc.user only used at runtime (read only), but check if exist -->
  <fail unless="targetdb.user"          message="Must define property 'eclipselink.jdbc.user' in jpa-config.properties !" />
  <fail unless="targetdb.password"      message="Must define property 'eclipselink.jdbc.password' in jpa-config.properties !" />

  <!-- eclipselink.jdbc.admin used to create/drop tables -->
  <fail unless="targetdb.admin"         message="Must define property 'eclipselink.jdbc.admin' in jpa-config.properties !" />
  <fail unless="targetdb.adminpassword" message="Must define property 'eclipselink.jdbc.adminpassword' in jpa-config.properties !" />

  <!-- tomcat role database -->
  <!-- TODO: use eclipselink.* values if tomcat.* values not defined (BUG GERARD) -->

  <fail unless="admindb.url"               message="Must define property 'admindb.url' in ${input}/project.properties !" />

  <!-- admindb.user only used at runtime (read only), but check if exist -->
  <fail unless="admindb.user"            message="Must define property 'admindb.user' in ${input}/project.properties !" />
  <fail unless="admindb.password"          message="Must define property 'admindb.password' in ${input}/project.properties !" />

  <!-- eclipselink.jdbc.admin used to create/drop tables -->
  <fail unless="admindb.admin"             message="Must define property 'admindb.admin' in ${input}/project.properties !" />
  <fail unless="admindb.adminpassword"     message="Must define property 'admindb.adminpassword' in ${input}/project.properties !" />


  
  <!-- sets SQL script directory -->
  <condition property="db.vendor" value="postgres/">
    <equals arg1="${jpa.database}" arg2="PostgreSQL" trim="true"/>
  </condition>
  <condition property="db.vendor" value="mssqlserver">
    <equals arg1="${jpa.database}" arg2="SQLServer" trim="true"/>
  </condition>

  <property name="ddl.directory" value="${output}/ddl/${db.vendor}/"/>
  <property name="tap.ddl.directory" value="${output}/tap/${db.vendor}/"/>

  <!--  no need to check for tap.ddl.directory -->
  <condition property="ddl.directory.set">
    <isset property="ddl.directory"/>
  </condition>

  <fail unless="ddl.directory.set" message="unable to define property 'ddl.directory' for the given vendor : ${eclipselink.target-database} !" />

  <!-- sets SQL separator for CREATE VIEW scrip -->
  <condition property="create.view.sep" value=";">
    <equals arg1="${eclipselink.target-database}" arg2="PostgreSQL" trim="true"/>
  </condition>

  <condition property="create.view.sep" value="GO">
    <equals arg1="${eclipselink.target-database}" arg2="SQLServer" trim="true"/>
  </condition>

  <condition property="create.view.sep.set">
    <isset property="create.view.sep"/>
  </condition>

  <fail unless="create.view.sep.set" message="unable to define property 'create.view.sep' for the given vendor : ${eclipselink.target-database} !" />


  <echo>JDBC URL  : ${eclipselink.jdbc.url}</echo>
  <echo>JDBC USER : ${eclipselink.jdbc.admin}</echo>
  <echo>DDL HOME  : ${ddl.directory}</echo>



</target>



<!-- target checkDB : is database server alive ? -->
<target name="checkDB" depends="initForDB" if="target.db.do" description="check databse properties">
  <echo>check target DB : ${targetdb.url} ...</echo>
  <echo>admin   : ${targetdb.admin}</echo>
  
  <doSqlTarget onerror="abort" print="true">select 1</doSqlTarget>

  <echo>check adminDB</echo>
  <echo>url : ${admindb.url} ...</echo>
  <echo>driver   : ${admindb.driver}</echo>
  <echo>admin   : ${admindb.admin}</echo>
  <echo>admin.p   : ${admindb.adminpassword}</echo>

  <doSqlAdmindb onerror="abort" print="true">select 1</doSqlAdmindb>

</target>


<target name="cleanDB" depends="initForDB" if="target.db.do">
  <echo>cleanDB : drop views then tables ...</echo>

  <!-- First retrieve the drop scripts from the database.
  This ensures the proper scripts get called. -->

  <echo>Executing ${ddl.directory}/backup/dropViews.sql</echo>
  <doSqlTarget autocommit="true" onerror="continue" src="${ddl.directory}/backup/dropViews.sql" />

  <echo>Executing ${ddl.directory}/backup/dropTables.sql</echo>
  <doSqlTarget autocommit="true" onerror="continue" src="${ddl.directory}/backup/dropTables.sql" />

  <echo>Executing ${tap.ddl.directory}/${project.name}_drop_tap_schema.sql</echo>
  <doSqlTarget autocommit="true" onerror="continue" src="${tap.ddl.directory}/${project.name}_drop_tap_schema.sql" delimiter="${create.view.sep}"/>
  
  <echo>cleanDB : done.</echo>
</target>



<!-- target createDB : creates tables then views -->
<target name="createDB" if="target.db.do"  depends="initForDB" description="CLEAN first and create database tables / views and TAP_SCHEMA">
  <echo>Creating tables then views to ${targetdb.url} ...</echo>

  <!-- web user rights -->
  <doSqlAdmindb src="./webapp/vo-urp-browser/ddl/${db.vendor}/admindb.sql"/> 
  <doSqlTarget onerror="abort" src="${ddl.directory}/createTables.sql" />
  <doSqlTarget onerror="abort" src="${ddl.directory}/createViews.sql" delimiter="${create.view.sep}"/>
  <doSqlTarget onerror="abort" src="${tap.ddl.directory}/${project.name}_create_tap_schema.sql" delimiter="${create.view.sep}"/>

</target>

<!-- copy generated files into meta table -->
<target name="insertDDLs" depends="initForDB">

  <java classname="AdminDBHandler" dir="${libs}/admindb/bin" fork="true" 
  		failonerror="true"  >
    <jvmarg value="-Xms32m"/>
    <jvmarg value="-Xmx64m"/>

    <arg value="I"/>
    <arg value="${admindb.driver}"/>
    <arg value="${admindb.url}"/>
    <arg value="${admindb.admin}"/>
    <arg value="${admindb.adminpassword}"/>
    <arg value="${output}/${source_intermediate}"/>
    <arg value="${ddl.directory}"/>
    
    <classpath>
      <pathelement location="${libs}/log4j-1.2.16.jar" />
      <fileset dir="${libs}/jdbc/"><include name="*.jar"/></fileset>
      <pathelement location="${libs}/admindb/bin/"/>
      <!-- use gerard patched 1.5.b1 version (enum problem present) -->
    </classpath>
    
   </java>
</target>

<target name="retrieveDDLs" depends="initForDB">

  <java classname="AdminDBHandler" dir="${libs}/admindb/bin" fork="true" 
  		failonerror="true"  >
    <jvmarg value="-Xms32m"/>
    <jvmarg value="-Xmx64m"/>

    <arg value="L"/>
    <arg value="${admindb.driver}"/>
    <arg value="${admindb.url}"/>
    <arg value="${admindb.admin}"/>
    <arg value="${admindb.adminpassword}"/>
    <arg value="${ddl.directory}/backup"/>
    
    <classpath>
      <pathelement location="${libs}/log4j-1.2.16.jar" />
      <fileset dir="${libs}/jdbc/"><include name="*.jar"/></fileset>
      <pathelement location="${libs}/admindb/bin/"/>
      <!-- use gerard patched 1.5.b1 version (enum problem present) -->
    </classpath>
    
   </java>
</target>

<!-- end of build_db.xml -->  
