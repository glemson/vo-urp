<!-- 
    build_db.xml file : specific targets for database management
-->  


<!-- presets -->

<!-- Performs an SQL query with the database defined in jpa-config.properties. -->
<presetdef name="doSql">

  <sql classpathref="jdbc-drivers.class.path" 
       driver="${eclipselink.jdbc.driver}"
       url="${eclipselink.jdbc.url}"
       userid="${eclipselink.jdbc.admin}"
       password="${eclipselink.jdbc.adminpassword}" />

</presetdef>

<!-- Performs an SQL query with the tomcat roles database defined in ${input}/project.properties -->
<presetdef name="doSqlTomcatRoles">

  <sql classpathref="jdbc-drivers.class.path"
       driver="${eclipselink.jdbc.driver}"
       url="${tomcat.realm.url}"
       userid="${tomcat.realm.admin}"
       password="${tomcat.realm.adminpassword}" />

</presetdef>




<!-- targets -->

<!-- sets DB properties -->
<target name="initForDB">
  <!-- Get jpa-config properties -->
  <property file="${properties}/jpa-config.properties" />

  <fail unless="eclipselink.target-database"    message="Must define property 'eclipselink.target-database' in jpa-config.properties !" />

  <fail unless="eclipselink.jdbc.driver"        message="Must define property 'eclipselink.jdbc.driver' in jpa-config.properties !" />
  <fail unless="eclipselink.jdbc.url"           message="Must define property 'eclipselink.jdbc.url' in jpa-config.properties !" />

  <!-- eclipselink.jdbc.user only used at runtime (read only), but check if exist -->
  <fail unless="eclipselink.jdbc.user"          message="Must define property 'eclipselink.jdbc.user' in jpa-config.properties !" />
  <fail unless="eclipselink.jdbc.password"      message="Must define property 'eclipselink.jdbc.password' in jpa-config.properties !" />

  <!-- eclipselink.jdbc.admin used to create/drop tables -->
  <fail unless="eclipselink.jdbc.admin"         message="Must define property 'eclipselink.jdbc.admin' in jpa-config.properties !" />
  <fail unless="eclipselink.jdbc.adminpassword" message="Must define property 'eclipselink.jdbc.adminpassword' in jpa-config.properties !" />

  <!-- tomcat role database -->
  <!-- TODO: use eclipselink.* values if tomcat.* values not defined (BUG GERARD) -->

  <fail unless="tomcat.realm.url"               message="Must define property 'tomcat.realm.url' in ${input}/project.properties !" />

  <!-- tomcat.realm.dbuser only used at runtime (read only), but check if exist -->
  <fail unless="tomcat.realm.dbuser"            message="Must define property 'tomcat.realm.dbuser' in ${input}/project.properties !" />
  <fail unless="tomcat.realm.password"          message="Must define property 'tomcat.realm.password' in ${input}/project.properties !" />

  <!-- eclipselink.jdbc.admin used to create/drop tables -->
  <fail unless="tomcat.realm.admin"             message="Must define property 'tomcat.realm.admin' in ${input}/project.properties !" />
  <fail unless="tomcat.realm.adminpassword"     message="Must define property 'tomcat.realm.adminpassword' in ${input}/project.properties !" />

  <!-- Web login/password -->
  <fail unless="webapp.admin.user"              message="Must define property 'webapp.admin.user' in ${input}/project.properties !" />
  <fail unless="webapp.admin.password"          message="Must define property 'webapp.admin.password' in ${input}/project.properties !" />


  
  <!-- sets SQL script directory -->
  <condition property="db.vendor" value="postgres/">
    <equals arg1="${eclipselink.target-database}" arg2="PostgreSQL" trim="true"/>
  </condition>
  <condition property="db.vendor" value="mssqlserver">
    <equals arg1="${eclipselink.target-database}" arg2="SQLServer" trim="true"/>
  </condition>

  <property name="ddl.directory" value="${output}/ddl/${db.vendor}/"/>
  <property name="tap.ddl.directory" value="${output}/tap/${db.vendor}/"/>

  <!--  no need to check for tap.ddl.directory -->
  <condition property="ddl.directory.set">
    <isset property="ddl.directory"/>
  </condition>

  <fail unless="ddl.directory.set" message="unable to define property 'ddl.directory' for the given vendor : ${eclipselink.target-database} !" />

  <!-- sets SQL separator for CREATE VIEW scrip -->
  <condition property="create.view.sep" value=";">
    <equals arg1="${eclipselink.target-database}" arg2="PostgreSQL" trim="true"/>
  </condition>

  <condition property="create.view.sep" value="GO">
    <equals arg1="${eclipselink.target-database}" arg2="SQLServer" trim="true"/>
  </condition>

  <condition property="create.view.sep.set">
    <isset property="create.view.sep"/>
  </condition>

  <fail unless="create.view.sep.set" message="unable to define property 'create.view.sep' for the given vendor : ${eclipselink.target-database} !" />


  <echo>JDBC URL  : ${eclipselink.jdbc.url}</echo>
  <echo>JDBC USER : ${eclipselink.jdbc.admin}</echo>
  <echo>DDL HOME  : ${ddl.directory}</echo>

</target>




<!-- target checkDB : is database server alive ? -->
<target name="checkDB" depends="initForDB" if="target.db.do" description="check databse properties">
  <echo>checkDB : ${eclipselink.jdbc.url} ...</echo>
  <echo>admin   : ${eclipselink.jdbc.admin}</echo>
  
  <doSql onerror="abort" print="true">select 1</doSql>
  <echo>checkDB : ${tomcat.realm.url} ...</echo>
  <echo>admin   : ${tomcat.realm.admin}</echo>

  <doSqlTomcatRoles onerror="abort" print="true">select 1</doSqlTomcatRoles>

  <echo>checkDB : done.</echo>
</target>




<!-- target cleanDB : drops views then tables -->
<target name="cleanDB" depends="initForDB" if="target.db.do">
  <echo>cleanDB : drop views then tables ...</echo>

  <echo>Executing ${ddl.directory}/${project.name}_dropViews.sql</echo>
  <doSql autocommit="true" onerror="continue" src="${ddl.directory}/${project.name}_dropViews.sql" />

  <echo>Executing ${ddl.directory}/${project.name}_dropTables.sql</echo>
  <doSql autocommit="true" onerror="continue" src="${ddl.directory}/${project.name}_dropTables.sql" />

  <echo>Executing ${tap.ddl.directory}/${project.name}_drop_tap_schema.sql</echo>
  <doSql autocommit="true" onerror="continue" src="${tap.ddl.directory}/${project.name}_drop_tap_schema.sql" delimiter="${create.view.sep}"/>
  
  <echo>cleanDB : done.</echo>
</target>



<!-- target createDB : creates tables then views -->
<target name="createDB" depends="cleanDB" if="target.db.do" description="CLEAN first and create database tables / views and TAP_SCHEMA">
  <echo>Creating tables then views to ${eclipselink.jdbc.url} ...</echo>

	
  <doSql onerror="abort" src="${ddl.directory}/${project.name}_createTables.sql" />
  <doSql onerror="abort" src="${ddl.directory}/${project.name}_createViews.sql" delimiter="${create.view.sep}"/>
  <doSql onerror="abort" src="${tap.ddl.directory}/${project.name}_create_tap_schema.sql" delimiter="${create.view.sep}"/>

  <!-- web user rights -->
  <copy verbose="true" todir="${output}/ddl" preservelastmodified="true" filtering="true">
		<fileset dir="./webapp/vo-urp-browser/ddl/">
		  <include name="*/admindb.sql"/> 
		</fileset>
		<filterset>
				<filter token="webapp.member.role" value="${webapp.member.role}" />
				<filter token="webapp.admin.role" value="${webapp.admin.role}" />
				<filter token="webapp.admin.user" value="${webapp.admin.user}" />
				<filter token="webapp.admin.password" value="${webapp.admin.password}" />
			</filterset>
	</copy>

  <echo>Writing admin '${webapp.admin.user}' and roles to ${tomcat.realm.url} ...</echo>

  <doSqlTomcatRoles onerror="abort" src="${output}/ddl/${db.vendor}/admindb.sql" />

  <echo>createDB done.</echo>
</target>


<!-- end of build_db.xml -->  
