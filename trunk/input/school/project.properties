# -----------------------------------------------------------------------------
# Properties defining the project and configuring the generation pipeline. 
# Must be filled in/updated by users 
# -----------------------------------------------------------------------------

#
# Project definition
#
# The current version of the project. Used as post-fix for generated products
# and in generated URLs
project.version 		= 0.x

# full title of the project
project.title 			= School
# Short name of the project. Used as prefix for many other products. 
# Should be sensibly named (no whitespace, non-alphanumeric but - or _ etc)
project.name 			= School
# string listing the authors of the project
project.authors 		= Gerard Lemson (gerard.lemson@mpe.mpg.de)
# Name of the "vendor" of the project
project.vendor 			= VO-URP Consortium
# email address of the contact for this project
project.contact			= gerard.lemson@mpe.mpg.de

# the location of the data model XMI file, under ${input} 
source 					= SchoolDM.xml

#
# Desired file names of :
#
# the jar file containing the VO-URP infrastructure classes
# this property exists because the jar file is built in the pipeline 
#     At some point we may generate these classes into a jar file and only distribute that 
build.src.file        	= vo-urp-src.jar
# the jar files containing generated model and test classes
build.gen.file  		= ${project.name}.jar
build.gen.weave.file	= ${project.name}-weave.jar
#
# Testing:
# 
### location of test directory (under ${input} !
sources.test			= test/java
### the tester class that must be run when testing is desired
test.class    			= org.vo.urp.test.Main
### target 
build.test.file   		= ${project.name}-test.jar


# JPA generation. 
jpa.persistence.unit	= ${project.name}-PU

# Java generation, prefix of generated Java classes files 
root_package  = org.ivoa
# can not be changed, is set in xjc scripts
model_package = org.ivoa.dm.model

# XML Schema generation
schemalocation_root  = http://vo-urp.googlecode.com/dm/xsd/
targetnamespace_root = http://www.ivoa.net/xml/${project.name}/${project.version}

# IVO Id of the deployed service, registered as an IVOA Resource in an IVOA Registry
# used as prefix for all fully qualified ivo identifiers.
service.ivoid = ivo://www.g-vo.org/${project.name}

# Indicates whether the generated runtime is in test mode, i.e. whether extra debug information 
# is written to the output etc.
mode.test=true


# TAP generation
# could/should we use eclipselink's target database?
# TODO set this to 
tap.target_database = 
tap.target_schema = 

# GraphViz generation (if installed!)
graphviz.path = "c:/Program Files/Graphviz 2.21/bin/dot.exe"

# Location of custom XSLT (de)normalisation scripts (under ${input}!)
xslt.dir=xslt
xslt.test.dir=./xslt/test
xslt.document.resolverURL=http://www.g-vo.org/vo-urp

# --------------------------------------------------
# Target switches : target.xxx.active
# true / false
# NOTE : only exact 'true' value is checked.
# --------------------------------------------------

# Controls if the database should be reset (views / tables) :
target.db.active = true

# Controls if unit tests should be run finally to check if generated codes are compatible :
target.run.active = false

# Enable static weaving of JPA classes (tomcat) :
target.weaving.active = true

# TODO : add switches for all main ant targets (multiple outputs => multiple switches)

# --------------------------------------------------


# TODO : add java options (doJpa, doJaxb, do...) later (vo-urp)

# --------------------------------------------------

