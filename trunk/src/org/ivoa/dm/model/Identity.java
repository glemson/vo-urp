package org.ivoa.dm.model;

import org.ivoa.dm.MetaModelFactory;
import org.ivoa.dm.ObjectClassType;

import java.io.Serializable;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.Transient;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;


/**
 * This class contains all flavor for objectType identifiers :  <br>
 * - primary key value : numeric (long)  <br>
 * - string xmlId : string for XML ID (xsd:id type) for xml instances <br>
 * - ivoId : URI format for external references
 *
 * @author Gerard Lemson, Laurent Bourges
 */
@Embeddable
@XmlAccessorType(XmlAccessType.NONE)
@XmlType(name = "Identity", namespace = "http://www.ivoa.net/xml/dm/base/v0.1")
public class Identity implements Serializable {
  //~ Constants --------------------------------------------------------------------------------------------------------

  /**
   * serial UID for Serializable interface : every concrete class must have its value corresponding to last
   * modification date of the UML model
   */
  private static final long serialVersionUID = 1L;

  //~ Members ----------------------------------------------------------------------------------------------------------

  /**
   * the primary key generated by JPA after persist execution : this value is updated by PostPersist & PostLoad
   * JPA events Transient because the metadata object holds on to the "real" id.  TODO should this be mapped to XML at
   * all? Or only the ivoID?
   */
  @Transient
  @XmlTransient
  private Long id;
  /**
   * A local xsd:ID for this object, can be used when registering a DM/Resource that has internal references.
   * Can also be created on the fly when marshalling an object to XML
   */

  //  @Basic(optional = true)
  //  @Column(name = "xmlId", nullable = true)
  @Transient
  @XmlID
  @XmlSchemaType(name = "ID")
  @XmlAttribute(name = "xmlId", required = false)
  private String xmlId = null;
  /**
   * The URI uniquely specifying the object as it is published in a DMService  This is not mapped to JPA, as it
   * is generated based on the UTYPE of the object and its generated ID
   */

  //@Basic(optional = true)
  //@Column(name = "ivoId", nullable = true)
  @Transient
  @XmlSchemaType(name = "anyURI")
  @XmlAttribute(name = "ivoId", required = false)
  private String ivoId = null;
  /** The URI uniquely specifying the object as it is published in a DMService */
  @Basic(optional = true)
  @Column(name = "publisherDID", nullable = true)
  @XmlSchemaType(name = "anyURI")
  @XmlAttribute(name = "publisherDID", required = false)
  private String publisherDID = null;

  //~ Constructors -----------------------------------------------------------------------------------------------------

/**
   * Public No-arg Constructor for JAXB / JPA Compliance
   */
  public Identity() {
    // nothing to do
  }

/**
   * Constructor with the given primary key. <br> Used by MetadataObject.lazyIdentity()
   *
   * @param pId the primary key value generated by JPA (maybe null if undefined)
   *
   * @see MetadataObject#lazyIdentity()
   */
  public Identity(final Long pId) {
    setId(pId);
  }

  //~ Methods ----------------------------------------------------------------------------------------------------------

  /**
   * Returns the primary key
   *
   * @return primary key or null if the metadata object is transient
   */
  public Long getId() {
    return id;
  }

  /**
   * Sets the primary key when the metadata object is persisted or loaded (PostPersist & PostLoad JPA events)
   *
   * @param id primary key value
   */
  protected void setId(final Long id) {
    this.id = id;
  }

  /**
   * Returns the external identifier (URI)
   *
   * @return external identifier (URI)
   */
  public String getIvoId() {
    return ivoId;
  }

  /**
   * Sets the external identifier (URI)
   *
   * @param ivoId external identifier (URI)
   */
  protected void setIvoId(final String ivoId) {
    this.ivoId = ivoId;
  }

  /**
   * Returns the local xsd:ID for this object
   *
   * @return local xsd:ID for this object
   */
  public String getXmlId() {
    return xmlId;
  }

  /**
   * Sets the local xsd:ID for this object
   *
   * @param xmlId local xsd:ID for this object
   */
  protected void setXmlId(final String xmlId) {
    this.xmlId = xmlId;
  }

  /**
   * Returns a string representation : creates a temporary StringBuilder(STRING_BUFFER_CAPACITY) and calls
   * #toString(java.lang.StringBuilder) method
   *
   * @return string representation
   *
   * @see #toString(java.lang.StringBuilder) method
   */
  @Override
  public final String toString() {
    // always gives an initial size to buffer : 
    return toString(new StringBuilder(128)).toString();
  }

  /**
   * Puts the string representation in the given buffer : "[$id : $xmlId : $ivoId] " pattern
   *
   * @param sb given string buffer to fill
   *
   * @return the given string buffer filled with the string representation
   */
  protected final StringBuilder toString(final StringBuilder sb) {
    sb.append("[").append((getId() != null) ? getId() : "N/A");

    if (getXmlId() != null) {
      sb.append(" - xmlId: ").append(getXmlId());
    }

    if (getIvoId() != null) {
      sb.append(" - ivoId: ").append(getIvoId());
    }

    return sb.append("] ");
  }

  /**
   * TODO : Method Description
   *
   * @return value TODO : Value Description
   */
  public String getPublisherDID() {
    return publisherDID;
  }

  /**
   * TODO : Method Description
   *
   * @param publisherDID 
   */
  public void setPublisherDID(final String publisherDID) {
    this.publisherDID = publisherDID;
  }

  /**
   * resolve an incoming IVO Id for a given type to the JPA id of the corresponding object instance  The implied
   * definition of the ivoId (utype+"/"+id), should be synchronised with the getIvoId() method
   *
   * @param ivoId
   * @param type
   *
   * @return value TODO : Value Description
   */
  public static Long resolveIvoId(final String ivoId, final Class type) {
    ObjectClassType md    = MetaModelFactory.getInstance().getObjectClassType(type);
    String          utype = md.getObjectType().getUtype();

    if (utype.charAt(utype.length() - 1) != '/') { // this test should not be necessary, but is safe
      utype = utype + "/";
    }

    if ((ivoId == null) || ! ivoId.startsWith(utype)) {
      return null;
    }

    return Long.valueOf(ivoId.substring(utype.length()));
  }
}
//~ End of file --------------------------------------------------------------------------------------------------------
