package org.ivoa.conf;

import java.io.IOException;
import java.io.InputStream;
import java.util.Iterator;
import java.util.Properties;

import org.apache.commons.logging.Log;
import org.ivoa.util.FileUtils;
import org.ivoa.util.LogUtil;
import org.ivoa.util.StringUtils;


/**
 * Runtime Configuration for the application.
 * Reads a file that is generated by the pipeline. 
 * It includes model specific properties.
 * 
 * TODO I have kept the se properties outside the Configuration class for now.
 * Could/should be merged with it (needs consultation with LB)
 * 
 * @author gerard lemson (GAVO)
 */
public class RuntimeConfiguration {

  /** file name for property file */
  public final static String PROPS = "runtime.properties";
  /** logger */
  protected static final Log log = LogUtil.getLogger();
	  
  private Properties properties = null;

  /** singleton instance */
  private static volatile RuntimeConfiguration instance = null;

  /**
   * Get Configuration Instance (singleton)
   * 
   * @return Configuration
   * 
   * @throws IllegalStateException if init() failed
   */
  public final static RuntimeConfiguration getInstance() {
	if (instance == null) {
	  final RuntimeConfiguration c = new RuntimeConfiguration();
	  if (c.init()) {
	    instance = c;
	  } else {
	    throw new IllegalStateException("Unable to create RuntimeConfiguration !");
	  }
	}
	return instance;
  }
  /**
   * Initialization : dumps Java System Properties and loads configuration file found in the system classpath (removes any empty property value)
   * 
   * @return true if well done
   */
  private boolean init() {
    // first dump properties :
    
    InputStream in = null;
    try {
      in = FileUtils.getSystemFileInputStream(PROPS);
	
      this.properties = new Properties();
      this.properties.load(in);
	
      // filter empty strings :
      String k, s;
      for (final Iterator it = this.properties.keySet().iterator(); it.hasNext();) {
        k = (String) it.next();
        s = this.properties.getProperty(k);
        if (StringUtils.isEmpty(s)) {
          it.remove();
        }
      }

      if (log.isDebugEnabled()) {
        log.debug("properties : " + getProperties());
      }
      return true;
	
    } catch (IOException ioe) {
      log.error("IO Failure : ", ioe);
      return false;
    } finally {
      FileUtils.closeStream(in);
    }
  }

  public Properties getProperties() {
	return properties;
  }

  // ~~ API properties ~~
  public String getIntermediateModelFile()
  {
	return properties.getProperty("intermediate.model.file");
  } 
  public String getProjectName()
  {
	return properties.getProperty("project.name");
  } 
  public String getProjectTitle()
  {
	return properties.getProperty("project.title");
  } 
  public String getBasePackage()
  {
	return properties.getProperty("base.package");
  } 
  public String getJAXBPackage()
  {
	return properties.getProperty("jaxb.package");
  } 
  public String getIntermediateModelXmlns()
  {
	return properties.getProperty("intermediate.model.xmlns");
  }
  public String getJPAPU()
  {
	return properties.getProperty("jpa.persistence.unit");
  } 
  public String getRootSchemaURL()
  {
	return properties.getProperty("root.schema.url");
  } 
  public String getJAXBContextClasspath()
  {
	return properties.getProperty("jaxb.context.classpath");
  }
  public String getTAPMetadataXMLFile()
  {
	return properties.getProperty("tap.metadata.xml.file");
  }
  public String getTAPMetadataVOTableFile()
  {
	return properties.getProperty("tap.metadata.votable.file");
  }
}
