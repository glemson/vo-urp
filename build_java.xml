<!-- 
    build_java.xml file : specific targets for java code
-->  

<!-- jalopy code formatter configuration -->
<property name="jalopyConvention" location="${libs}/ant/jalopy-java-laurent.xml" />


<!-- classpath for base module -->
<!-- class paths for base classes -->
<!-- apache logging + Log4J -->
<!-- eclipselink JPA 1.0 reference implementation -->
<!-- JAXB 2.1.6 reference implementation -->
<path id="project.class.path">
  <pathelement location="${libs}/commons-logging-1.1.jar" />
  <pathelement location="${libs}/log4j-1.2.15.jar" />
  <pathelement location="${libs}/commons-httpclient-3.1.jar" />
  <pathelement location="${libs}/commons-fileupload-1.2.1.jar" />
  <pathelement location="${libs}/commons-io-1.3.2.jar" />
  <!-- jaxb 2.1.6 RI -->
  <pathelement location="${libs}/jaxb-api-2.1.jar" />
  <pathelement location="${libs}/jaxb-impl-2.1.6.jar" />
  <pathelement location="${libs}/jaxb-xjc-2.1.6.jar" />
  <!-- jaxb 2.1.6 RI dependencies -->
  <pathelement location="${libs}/activation.jar" />
  <pathelement location="${libs}/jsr173_1.0_api.jar" />
  <!-- eclipselink 1.0M8 -->
  <pathelement location="${libs}/eclipselink.jar" />
  <pathelement location="${libs}/javax.persistence_1.0.0.jar" />
  <!-- saxon9 for runtime XSLT processing -->
  <pathelement location="${libs}/saxon9.jar" />
  <pathelement location="${libs}/saxon9-s9api.jar" />
</path>

<!-- class paths for generated classes -->
<path id="infrastructure.class.path">
  <pathelement location="${dist}/${build.src.file}" />
</path>

<!-- class paths for runtime -->
<path id="runtime.class.path">
  <pathelement location="${dist}/${build.src.file}" />
  <pathelement location="${dist}/${build.gen.file}" />
  <!-- sql driver -->
  <path refid="jdbc-drivers.class.path" />
  <!-- properties at last to add / because it is a directory -->
  <pathelement path="${properties}" />
</path>


<!-- up to date checks -->

<!-- checks if build is necessary : java source code & libraries -->
<uptodate property="build.base.notRequired">
  <srcfiles dir= "${root}" includes="build.properties"/>
  <srcfiles dir= "${sources}" includes="**/*"/>
  <srcfiles dir= "${libs}" includes="**/*.jar"/>
  <mapper type="merge" to="${dist}/${build.src.file}"/>
</uptodate>  


<!-- presets -->

<!-- defines Jalopy task -->
<taskdef name="jalopy"
         classname="de.hunsicker.jalopy.plugin.ant.AntPlugin">
  <classpath>
    <pathelement location="${libs}/ant/jalopy.jar" />
    <pathelement location="${libs}/ant/jalopy-ant.jar" />
    <pathelement location="${libs}/log4j-1.2.15.jar"/>
  </classpath>
</taskdef>

<!-- defines eclipselink static weaving task -->
<taskdef name="weave" classname="org.eclipse.persistence.tools.weaving.jpa.StaticWeaveAntTask">
  <classpath>
    <pathelement location="${libs}/eclipselink.jar" />
    <pathelement location="${libs}/javax.persistence_1.0.0.jar" />
    <pathelement location="${dist}/${build.src.file}" />
  </classpath>
</taskdef>



<!-- targets -->

<!-- target cleanJava : clean build files -->
<target name="cleanJava" depends="cleanDist">
  <echo>cleaning directory : ${build} ...</echo>
  
  <delete includeemptydirs="false" verbose="true">
    <fileset dir="${build}">
      <exclude name="*.jdbc" />
    </fileset>
  </delete>
  
  <echo>cleaned directory : ${build} : done.</echo>
</target>




<!-- target cleanDist : clean build files -->
<target name="cleanDist">
  <echo>cleaning directory : ${dist} ...</echo>
  
  <delete includeemptydirs="false" verbose="true">
    <fileset dir="${dist}">
      <exclude name="doc/**/*" />
    </fileset>
  </delete>
  
  <echo>cleaned directory : ${dist} : done.</echo>
</target>



<!-- compiles java files and jar them and compiles MetaModel generated by JAXB 2.1 -->
<target name="compile" depends="cleanJava">
  <echo>compile ${base.title} ...</echo>
  <echo>compile from : ${sources}</echo>
  <echo>compile to   : ${build.src}</echo>

  <mkdir dir="${build.src}"/>
  
  <javac sourcepath="" srcdir="${sources}" destdir="${build.src}" listfiles="false" 
         fork="true" verbose="false" encoding="UTF-8"
         debug="on" deprecation="on" optimize="on" casesensitive="true" 
         source="1.5" target="1.5">
    
    <classpath refid="project.class.path" />
    
    <include name="**/*.java"/>
  </javac> 
  
  <pathconvert pathsep=" " property="jar.classpath">
    <path refid="project.class.path"/>
    <map from="${root}${file.separator}" to="..${file.separator}"/>
  </pathconvert>
  
  <pathconvert property="jar.classpath.flat" dirsep="/">    
    <path refid="project.class.path"/>
  </pathconvert>

  <!-- write a flattened classpath -->
  <echo file="${dist}/${build.src.file}.classpath">module.classpath=${jar.classpath.flat}</echo>
  <echo >module.classpath=${jar.classpath.flat}</echo>
  

  <copy tofile="${properties}/runtime.properties" filtering="true" verbose="true" overwrite="true">
	<fileset file="runtime.properties.template"/>
	<filterset>
	<!-- 
	   Filters for copying runtime.properties 
	   Check that file for the full list of required properties
	-->
	<filter token="project.name" value="${project.name}"/> 
	<filter token="project.title" value="${project.title}"/> 
	<filter token="intermediate.model.file" value="${source_intermediate}"/> 
	<filter token="base.package" value="${root_package}."/>
	<filter token="jpa.persistence.unit" value="${jpa.persistence.unit}"/>
	<!-- TODO fix next, should not have literal in there -->
	<filter token="jaxb.package" value="${root_package}.metamodel"/> 
	<!-- TODO next can not be given as a property, must be generated from the model -->
	<filter token="jaxb.classpath" value="${jaxb.classpath}"/>
	
	<filter token="tap.metadata.xml.file" value=""/>
	<filter token="tap.metadata.votable.file" value=""/>
	</filterset>
  </copy>
    <concat destfile="${properties}/runtime.properties" append="true">
    <filelist dir="${output}/java" files="jaxb.context.classpath"/>
  </concat>

  
  
  <jar jarfile="${dist}/${build.src.file}" compress="true" roundup="true" >
    <fileset dir="${build.src}" />
    <fileset dir="${properties}" >
      <include name="global.properties"/>
      <include name="runtime.properties"/>
      <include name="log4j.*"/>
    </fileset>
    <fileset dir="${sources}">
      <include name="**/jaxb.index" />
    </fileset>
    
    <manifest>
      <attribute name="Built-By" value="${build.by}"/>
      <attribute name="Built-Date" value="${build.date}"/>
      
      <attribute name="Build-Jdk" value="${java.vm.version}"/>
      <attribute name="Build-Os" value="${os.name} ${os.version} - ${os.arch}"/>
      
      <attribute name="Class-Path" value="${jar.classpath}"/>
      
      <section name="Common">
        <attribute name="Specification-Title" value="${base.title}"/>
        <attribute name="Specification-Version" value="${version}"/>
        <attribute name="Specification-Vendor" value="${vendor}"/>
        <attribute name="Implementation-Title" value="${base.title}"/>
        <attribute name="Implementation-Version" value="${version} - ${build.date}"/> 
      </section>        
    </manifest>
    
  </jar>
  
  <echo>compile ${base.title} : done.</echo>
</target>




<!-- target makeOutput : compiles generated java code and javadoc : -->
<target name="makeOutput" depends="compile, compileOutput, format, weaving, compileTest, makeJavaDoc">
  <echo>makeOutput : done.</echo>
</target>




<!-- Compile generated java files -->
<target name="compileOutput">
  <echo>compile ${gen.title} ...</echo>
  <echo>compile from : ${sources.gen}/src</echo>
  <echo>compile to   : ${build.gen}</echo>
  
  <mkdir dir="${build.gen}"/>

  <!-- jar includes intermediate model instance -->
  <copy verbose="true" todir="${build.gen}" preservelastmodified="true">
    <fileset file="${output}/${source_intermediate}" />
  </copy>

  <!-- adds namespace to intermediateModel instance with m: prefix -->
  <replace file="${build.gen}/${source_intermediate}" encoding="UTF-8">
    <replacetoken>&lt;model</replacetoken>
    <replacevalue>
      &lt;m:model xmlns:m="http://ivoa.org/theory/datamodel/generationmetadata/v0.1" 
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                  xsi:schemaLocation="http://ivoa.org/theory/datamodel/generationmetadata/v0.1 http://volute.googlecode.com/svn/trunk/projects/theory/snapdm/input/intermediateModel.xsd"</replacevalue>
  </replace>
  <replace file="${build.gen}/${source_intermediate}" encoding="UTF-8">
    <replacetoken>&lt;/model</replacetoken>
    <replacevalue>&lt;/m:model</replacevalue>
  </replace>
  
  <javac sourcepath="" srcdir="${sources.gen}/src" destdir="${build.gen}" listfiles="false" 
         fork="true" verbose="false" encoding="UTF-8"
         debug="on" deprecation="on" optimize="on" casesensitive="true" 
         source="1.5" target="1.5">
    
    <classpath refid="infrastructure.class.path" />
    
    <include name="**/*.java"/>
  </javac>
  
  <jar jarfile="${dist}/${build.gen.file}" compress="true" roundup="true">
    <fileset dir="${build.gen}" />
    <fileset dir="${build.src}">
      <!-- include JPA annotated classes -->
      <include name="org/ivoa/dm/model/Identity*" />
      <include name="org/ivoa/dm/model/MetadataObject*" />
      <include name="org/ivoa/tap/**" />
    </fileset>
    <fileset dir="${outputJava}">
      <include name="META-INF/persistence.xml" />
    </fileset>
    <fileset dir="${outputJava}/src">
      <include name="**/jaxb.index" />
    </fileset>

    <manifest>
      <attribute name="Built-By" value="${build.by}"/>
      <attribute name="Built-Date" value="${build.date}"/>
      
      <attribute name="Build-Jdk" value="${java.vm.version}"/>
      <attribute name="Build-Os" value="${os.name} ${os.version} - ${os.arch}"/>

      <section name="Common">
        <attribute name="Specification-Title" value="${gen.title}"/>
        <attribute name="Specification-Version" value="${version}"/>
        <attribute name="Specification-Vendor" value="${vendor}"/>
        <attribute name="Implementation-Title" value="${gen.title}"/>
        <attribute name="Implementation-Version" value="${version} - ${build.date}"/> 
      </section>        
    </manifest>
    
  </jar>

  <!-- remove JPA annotated classes in base Jar -->

  <pathconvert pathsep=" " property="jar.classpath">
    <path refid="project.class.path"/>
    <map from="${root}${file.separator}" to="..${file.separator}"/>
  </pathconvert>
  
  <pathconvert property="jar.classpath.flat" dirsep="/">    
    <path refid="project.class.path"/>
  </pathconvert>

  <!-- write a flattened classpath -->
  <echo file="${dist}/${build.src.file}.classpath">module.classpath=${jar.classpath.flat}</echo>

  <delete file="${dist}/${build.src.file}"/>
  
  <jar jarfile="${dist}/${build.src.file}" compress="true" roundup="true">
    <fileset dir="${build.src}">
      <!-- exclude JPA annotated classes -->
      <exclude name="org/ivoa/dm/model/Identity*" />
      <exclude name="org/ivoa/dm/model/MetadataObject*" />
      <exclude name="org/ivoa/tap/**" />
    </fileset>
    <fileset dir="${properties}">
      <include name="global.properties"/>
      <include name="runtime.properties"/>
      <include name="log4j.*"/>
    </fileset>
    <fileset dir="${sources}">
      <include name="**/jaxb.index" />
    </fileset>
    
    <manifest>
      <attribute name="Built-By" value="${build.by}"/>
      <attribute name="Built-Date" value="${build.date}"/>
      
      <attribute name="Build-Jdk" value="${java.vm.version}"/>
      <attribute name="Build-Os" value="${os.name} ${os.version} - ${os.arch}"/>
      
      <attribute name="Class-Path" value="${jar.classpath}"/>
      
      <section name="Common">
        <attribute name="Specification-Title" value="${base.title}"/>
        <attribute name="Specification-Version" value="${version}"/>
        <attribute name="Specification-Vendor" value="${vendor}"/>
        <attribute name="Implementation-Title" value="${base.title}"/>
        <attribute name="Implementation-Version" value="${version} - ${build.date}"/> 
      </section>        
    </manifest>
    
  </jar>
  
  <!-- remove to avoid classes in svn -->
  <delete dir="${build.src}"/>
  <delete dir="${build.gen}"/>
  
  <echo>compile ${gen.title} : done.</echo>
</target>



<!--
EclipseLink weave Ant Task Attributes
Attribute	Description	Default	Required or Optional

- source
Specifies the location of the Java source files to weave: either a directory or a JAR file.
If the persistence.xml file is not in this location, you must specify the location of the persistence.xml using the persistenceinfo attribute.

Required

- target
Specifies the output location: either a directory or a JAR file.

Required

- persistenceinfo
Specifies the location of the persistence.xml file if it is not in the same location as the source.

Optional

- log
Specifies a logging file.
See Logging.
Optional
loglevel
Specifies the amount and detail of log output.
Valid java.util.logging.Level values are the following:
OFF
SEVERE
WARNING
INFO
CONFIG
FINE
FINER
FINEST
For more information, see Logging.
Level.OFF
Optional
-->
<target name="weaving" description="perform static weaving" if="target.weaving.do">

  <mkdir dir="${build.weaving}"/>

  <delete includeemptydirs="true" verbose="false" failonerror="false">
    <fileset dir="${build.weaving}"/>
  </delete>

  <weave source="${dist}/${build.gen.file}" 
         target="${build.weaving}"
         loglevel="WARNING">
    <classpath>
      <path refid="project.class.path" />
      <path refid="infrastructure.class.path" />      
    </classpath>
  </weave>         
  
  <jar jarfile="${dist}/${build.gen.weave.file}" compress="true" roundup="true" manifest="${build.weaving}/META-INF/MANIFEST.MF">
    <fileset dir="${build.weaving}" />
  </jar>
 
  <delete includeemptydirs="true" verbose="true" failonerror="no">
    <fileset dir="${build.weaving}"/>
  </delete>

</target>




<!-- target makeJavaDoc : creates javadoc from source code -->
<target name="makeJavaDoc">
  <echo>making generated Java classes javadoc ...</echo>
  
  <mkdir dir="${javadoc}"/>
  
  <javadoc  additionalparam="-notimestamp"
            destdir="${javadoc}"
            access="private" 
            author="true"
            encoding="UTF-8"
            source="1.5"
            use="true"
            windowtitle="${source} : ${gen.title}">
    
    <classpath>
      <path refid="project.class.path" />
    </classpath>
    
    <fileset dir="${sources}">
      <include name="**/*.java"/>
    </fileset>
    <fileset dir="${sources.gen}/src">
      <include name="**/*.java"/>
    </fileset>
    <fileset dir="${sources.test}">
      <include name="**/*.java"/>
    </fileset>
  
  </javadoc>
  
  <echo>generated Java classes javadoc : done.</echo>
</target>




<!-- target format : formats all generated java sources -->
<target name="format">
  <!-- 
      Invokes Jalopy as follows:

      - All formatted files will have unix fileformat (\n)
      - Load your code convention from the given url
      - Override the convention to use loglevel "info"
      - Override the convention to use 2 threads
      - The import optimization feature will work (if enabled in the active
        convention), because a classpath reference is specified

        Don't forget to setup an include pattern as Jalopy truly expects
        valid Java source files as input!
  -->
  
  <!--
  note : formatting causes problems with annotations for enumerations but allows people to read code ...
  Solution : compile first then formats for read only purposes.
  -->
  
  <jalopy fileformat="unix"
          convention="${jalopyConvention}"
          encoding="UTF-8"
          failonerror="false"
          history="NONE"
          loglevel="warn"
          threads="1"
          classpathref="infrastructure.class.path">
    <fileset dir="${sources.gen}/src">
      <include name="**/*.java" />
    </fileset>
  </jalopy>
</target>




<!-- Compile Unit Tests -->
<target name="compileTest">
  <echo>compile tests ...</echo>
  <echo>compile from : ${sources.test}</echo>
  <echo>compile to   : ${build.test}</echo>
  
  <mkdir dir="${build.test}"/>
  
  <javac sourcepath="" srcdir="${sources.test}" destdir="${build.test}" listfiles="false" 
         fork="true" verbose="false" encoding="UTF-8"
         debug="on" deprecation="on" optimize="on" casesensitive="true" 
         source="1.5" target="1.5">
    
    <classpath refid="runtime.class.path" />
    
    <include name="**/*.java"/>
  </javac>

  <pathconvert pathsep=" " property="jar.test.classpath">
    <path refid="runtime.class.path"/>
    <map from="${dist}/" to=""/>
    <map from="${root}${file.separator}" to="..${file.separator}"/>
  </pathconvert>

  <jar jarfile="${dist}/${build.test.file}" compress="true" roundup="true">
    <fileset dir="${build.test}" />

    <manifest>
      <attribute name="Built-By" value="${build.by}"/>
      <attribute name="Built-Date" value="${build.date}"/>
      
      <attribute name="Build-Jdk" value="${java.vm.version}"/>
      <attribute name="Build-Os" value="${os.name} ${os.version} - ${os.arch}"/>
      
        <!-- last / is used to consider property directory correctly : properties/ to load configuration files -->
      <attribute name="Class-Path" value="${jar.test.classpath}/"/>

      <attribute name="Main-Class" value="${test.class}"/>
      
      <section name="Common">
        <attribute name="Specification-Title" value="${gen.title}"/>
        <attribute name="Specification-Version" value="${version}"/>
        <attribute name="Specification-Vendor" value="${vendor}"/>
        <attribute name="Implementation-Title" value="${gen.title}"/>
        <attribute name="Implementation-Version" value="${version} - ${build.date}"/> 
      </section>        
    </manifest>
    
  </jar>
  
  <!-- remove to avoid classes in svn -->
  <delete dir="${build.test}"/>
  
  <echo>compile tests : done.</echo>
</target>




<!-- target run : launches deployed application on Unix environment (bash used) -->
<target name="run" if="target.run.do">
  <echo message="running ${gen.title} ..."/>
  
  <delete file="${build}/root.log" />
  
  <java jar="${dist}/${build.test.file}" dir="${build}" fork="true" failonerror="true">
    <jvmarg value="-Xms64m"/>
    <jvmarg value="-Xmx256m"/>
    <!-- eclipse weaving support -->
<!--    <jvmarg value="-javaagent:../libs/eclipselink.jar"/> -->
    <arg value="VO-URP-PU"/>
   </java>  

  <echo message="run ${gen.title} : terminated."/>
</target>


<!-- end of build_java.xml -->  
