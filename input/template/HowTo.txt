How to create a new model
-------------------------
Here we give short instructions for a quick-start in VO-URP.
We describe how to create a new VO-URP project for a data model and how to configure the 
environment so that the build scripts will produce a web application giving access to a database representing the  model.


Step 1: create new project directory from template project
----------------------------------------------------------
Create a new subdirectory by copying two files and the properties/ dubsirectory
from this template subdirectory into another location.
The files are first a template data model in the template_DM.xml file.
This stores a model created with MagicDraw CE 12.1 and containing the current UML profile.
You will obviously want to update this model. The documentation for the proper use of MagicDraw and 
the VO-URP UML profile will be give elsewhere. 
You may alwo want to rename the copied data model.

The second file is project.properties. This file configures the solution. It should not be renamed!
It contains parameters that will be used in the various build tasks contained in the %VO-URP-ROOT%/build.xml file.
We willl discuss its parameters in step 2.

To be able to run the build tasks on the new directory one must update the %VO-URP-ROOT%/build.properties file.
This contains (SVN 474) two parameters. The first, input, gives the location to the copy of the template directory
that you created. It tells the build file which project to build.
The second indicates the location of the graphviz executable. If available it will generate a "clickable" image in the
generated HTML documentation.
  
  
At this point the following tasks can be run, even without any changes to the configuration:
run_xmi2intermediate
run_intermediate2***
generateAll

  
Step 2. edit project.properties
-------------------------------
To ensure that the build tasks will produce a solution to your liking you must update the project.properties
file in the newly created directory.
This file contains properties that give a name/title to the project, that point to the data model and give
desired names to generated resources, provide roots to XML namespaces and Java packages
...
...
...


Step 3. create database and edit jpa-config.properties
------------------------------------------------------
Before running the fullMakeAll task, we need to create a database for the build script to populate with tables.
Currently we support SQLServer and Postgres. A user with ownership (SQLServer) or superuser (PostgreSQL) 
privileges must be defined for the database.
The jpa-config.properties file in the properties/ subdirectory must be configured with the proper
data for this database/user combination for connecting to the database.

Now the following tasks can be run:
checkDB
createDB




Step 4. install tomcat and edit webapp/vo-urp-browser/build.properties
----------------------------------------------------------------------
After installing and testing tomcat, update the build.properties file to indicate the location where tomcat has been installed.




Step 5. run build.xml tasks
---------------------------
The main tasks one may wish to run are the following:
generateAll:
		this generates all products from the UML model. It does nothing else, no compilation etc.
		it is useful for checking that the model was created properly.
		
forceMakeAll:
		does everything that it is configured to do. 
		includes:
				generating all products, 
				building java classes, 
				updating the database (if target.db.active = true)
				building the war file and deploying it
				running tests (if target.run.active and sources.test exists



-----------------------------------------------------
TODO need documentation of build tasks.
Major "side-"effects such as deployment of war file, creation of (tables in) database.

possibly failing of database table dropping due to foreign key constraints.