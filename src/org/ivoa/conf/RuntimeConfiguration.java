package org.ivoa.conf;

import org.apache.commons.logging.Log;

import org.ivoa.util.FileUtils;
import org.ivoa.util.LogUtil;
import org.ivoa.util.StringUtils;

import java.io.IOException;
import java.io.InputStream;

import java.util.Iterator;
import java.util.Properties;


/**
 * Runtime Configuration for the application. Reads a file that is generated by the pipeline.  It includes model
 * specific properties.  TODO I have kept the se properties outside the Configuration class for now. Could/should be
 * merged with it (needs consultation with LB)
 *
 * @author gerard lemson (GAVO)
 */
public class RuntimeConfiguration {
  //~ Constants --------------------------------------------------------------------------------------------------------

  /** file name for property file */
  public static final String PROPS = "runtime.properties";
  /** logger */
  protected static final Log log = LogUtil.getLogger();
  /** singleton instance */
  private static volatile RuntimeConfiguration instance = null;

  //~ Members ----------------------------------------------------------------------------------------------------------

  /**
   * TODO : Field Description
   */
  private Properties properties = null;

  //~ Methods ----------------------------------------------------------------------------------------------------------

  /**
   * Get Configuration Instance (singleton)
   *
   * @return Configuration
   *
   * @throws IllegalStateException if init() failed
   */
  public static final RuntimeConfiguration getInstance() {
    if (instance == null) {
      final RuntimeConfiguration c = new RuntimeConfiguration();

      if (c.init()) {
        instance = c;
      } else {
        throw new IllegalStateException("Unable to create RuntimeConfiguration !");
      }
    }

    return instance;
  }

  /**
   * Initialization : dumps Java System Properties and loads configuration file found in the system classpath
   * (removes any empty property value)
   *
   * @return true if well done
   */
  private boolean init() {
    // first dump properties :
    InputStream in = null;

    try {
      in = FileUtils.getSystemFileInputStream(PROPS);

      this.properties = new Properties();
      this.properties.load(in);

      // filter empty strings :
      String k;

      // filter empty strings :
      String s;

      for (final Iterator it = this.properties.keySet().iterator(); it.hasNext();) {
        k = (String) it.next();
        s = this.properties.getProperty(k);

        if (StringUtils.isEmpty(s)) {
          it.remove();
        }
      }

      if (log.isDebugEnabled()) {
        log.debug("properties : " + getProperties());
      }

      return true;
    } catch (final IOException ioe) {
      log.error("IO Failure : ", ioe);

      return false;
    } finally {
      FileUtils.closeStream(in);
    }
  }

  /**
   * TODO : Method Description
   *
   * @return value TODO : Value Description
   */
  public Properties getProperties() {
    return properties;
  }

  // ~~ API properties ~~
  /**
   * TODO : Method Description
   *
   * @return value TODO : Value Description
   */
  public String getIntermediateModelFile() {
    return properties.getProperty("intermediate.model.file");
  }

  /**
   * TODO : Method Description
   *
   * @return value TODO : Value Description
   */
  public String getProjectName() {
    return properties.getProperty("project.name");
  }

  /**
   * TODO : Method Description
   *
   * @return value TODO : Value Description
   */
  public String getProjectContact() {
    return properties.getProperty("project.contact");
  }

  /**
   * TODO : Method Description
   *
   * @return value TODO : Value Description
   */
  public String getProjectVersion() {
    return properties.getProperty("project.version");
  }

  /**
   * TODO : Method Description
   *
   * @return value TODO : Value Description
   */
  public String getProjectTitle() {
    return properties.getProperty("project.title");
  }

  /**
   * TODO : Method Description
   *
   * @return value TODO : Value Description
   */
  public String getTitle() {
    return getProjectTitle() + "  -  " + getProjectVersion();
  }

  /**
   * TODO : Method Description
   *
   * @return value TODO : Value Description
   */
  public String getBasePackage() {
    return properties.getProperty("base.package");
  }

  /**
   * TODO : Method Description
   *
   * @return value TODO : Value Description
   */
  public String getJAXBPackage() {
    return properties.getProperty("jaxb.package");
  }

  /**
   * TODO : Method Description
   *
   * @return value TODO : Value Description
   */
  public String getIntermediateModelXmlns() {
    return properties.getProperty("intermediate.model.xmlns");
  }

  /**
   * TODO : Method Description
   *
   * @return value TODO : Value Description
   */
  public String getJPAPU() {
    return properties.getProperty("jpa.persistence.unit");
  }

  /**
   * TODO : Method Description
   *
   * @return value TODO : Value Description
   */
  public String getRootSchemaURL() {
    return properties.getProperty("root.schema.url");
  }

  /**
   * TODO : Method Description
   *
   * @return value TODO : Value Description
   */
  public String getJAXBContextClasspath() {
    return properties.getProperty("jaxb.context.classpath");
  }

  /**
   * TODO : Method Description
   *
   * @return value TODO : Value Description
   */
  public String getTAPMetadataXMLFile() {
    return properties.getProperty("tap.metadata.xml.file");
  }

  /**
   * TODO : Method Description
   *
   * @return value TODO : Value Description
   */
  public String getTAPMetadataVOTableFile() {
    return properties.getProperty("tap.metadata.votable.file");
  }
}
//~ End of file --------------------------------------------------------------------------------------------------------
