package org.ivoa.dm.model;


import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;

import org.ivoa.dm.MetaModelFactory;
import org.ivoa.dm.ObjectClassType;
import org.ivoa.dm.api.IIdentity;
import org.ivoa.util.JavaUtils;
import org.ivoa.util.text.LocalStringBuilder;

/**
 * This class implements the Identity API to specify all objectType identifiers :  <br/>
 * - primary key value : numeric (long)  <br/>
 * - string xmlId : string for XML ID (xsd:id type) for xml instances <br/>
 * - ivoId : URI format for external references <br/>
 * - publisherDID : URI uniquely specifying the object as it is published in a DMService
 *
 * @author Laurent Bourges (voparis) / Gerard Lemson (mpe)
 */
@Embeddable
@XmlAccessorType(XmlAccessType.NONE)
@XmlType(name = "Identity", namespace = "http://www.ivoa.net/xml/dm/base/v0.1")
public class Identity implements IIdentity {

    //~ Constants --------------------------------------------------------------------------------------------------------
 
    /** serial UID for Serializable interface */
    private static final long serialVersionUID = 1L;

    //~ Members ----------------------------------------------------------------------------------------------------------
    /**
     * the primary key generated by JPA after persist execution : this value is updated by PostPersist & PostLoad
     * JPA events Transient because the metadata object holds on to the "real" id.  TODO should this be mapped to XML at
     * all? Or only the ivoID?
     */
    @Transient
    @XmlTransient
    private Long id;
    /**
     * A local xsd:ID for this object, can be used when registering a DM/Resource that has internal references.
     * Can also be created on the fly when marshalling an object to XML
     */
    @Transient
    @XmlID
    @XmlSchemaType(name = "ID")
    @XmlAttribute(name = "xmlId", required = false)
    private String xmlId = null;
    /**
     * The URI uniquely specifying the object as it is published in a DMService  This is not mapped to JPA, as it
     * is generated based on the UTYPE of the object and its generated ID
     */
    @Transient
    @XmlSchemaType(name = "anyURI")
    @XmlAttribute(name = "ivoId", required = false)
    private String ivoId = null;
    /** 
     * The URI uniquely specifying the object as it is published in a DMService
     */
    @Basic(optional = true)
    @Column(name = "publisherDID", nullable = true)
    @XmlSchemaType(name = "anyURI")
    @XmlAttribute(name = "publisherDID", required = false)
    private String publisherDID = null;

    //~ Constructors -----------------------------------------------------------------------------------------------------
    /**
     * Public No-arg Constructor for JAXB / JPA Compliance
     */
    public Identity() {
        // nothing to do
    }

    /**
     * Constructor with the given primary key. <br> Used by MetadataObject.lazyIdentity()
     *
     * @param pId the primary key value generated by JPA (maybe null if undefined)
     *
     * @see MetadataObject#lazyIdentity()
     */
    public Identity(final Long pId) {
        setId(pId);
    }

    //~ Methods ----------------------------------------------------------------------------------------------------------
    /**
     * Returns the primary key
     *
     * @return primary key or null if the metadata object is transient
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the primary key when the metadata object is persisted or loaded (PostPersist & PostLoad JPA events)
     *
     * @param pId primary key value
     */
    protected void setId(final Long pId) {
        this.id = pId;
    }

    /**
     * Returns the local xsd:ID for this object
     *
     * @return local xsd:ID for this object
     */
    public String getXmlId() {
        return xmlId;
    }

    /**
     * Sets the local xsd:ID for this object
     *
     * @param pXmlId local xsd:ID for this object
     */
    protected void setXmlId(final String pXmlId) {
        this.xmlId = pXmlId;
    }

    /**
     * Returns the external identifier (URI)
     *
     * @return external identifier (URI)
     */
    public String getIvoId() {
        return ivoId;
    }

    /**
     * Sets the external identifier (URI)
     *
     * @param pIvoId external identifier (URI)
     */
    protected void setIvoId(final String pIvoId) {
        this.ivoId = pIvoId;
    }

    /**
     * Returns the URI uniquely specifying the object as it is published in a DMService
     *
     * @return URI uniquely specifying the object as it is published in a DMService
     */
    public String getPublisherDID() {
        return publisherDID;
    }

    /**
     * Sets the URI uniquely specifying the object as it is published in a DMService
     *
     * @param pPublisherDID URI uniquely specifying the object as it is published in a DMService
     */
    public void setPublisherDID(final String pPublisherDID) {
        this.publisherDID = pPublisherDID;
    }

    /**
     * Returns a string representation : creates a temporary StringBuilder(STRING_BUFFER_CAPACITY) and calls
     * #toString(java.lang.StringBuilder) method
     *
     * @return string representation
     *
     * @see #toString(java.lang.StringBuilder) method
     */
    @Override
    public final String toString() {
      return LocalStringBuilder.toString(toString(LocalStringBuilder.getBuffer()));
    }

    /**
     * Puts the string representation in the given buffer : "[$id : $xmlId : $ivoId] " pattern
     *
     * @param sb given string buffer to fill
     *
     * @return the given string buffer filled with the string representation
     */
    protected final StringBuilder toString(final StringBuilder sb) {
        sb.append("[").append((getId() != null) ? getId() : "N/A");

        if (JavaUtils.isSet(getXmlId())) {
            sb.append(" - xmlId: ").append(getXmlId());
        }

        if (JavaUtils.isSet(getPublisherDID())) {
            sb.append(" - publisherDID: ").append(getPublisherDID());
        }

        if (JavaUtils.isSet(getIvoId())) {
            sb.append(" - ivoId: ").append(getIvoId());
        }
        // TODO create IvoId if not exists

        return sb.append("] ");
    }

    /**
     * resolve an incoming IVO Id for a given type to the JPA id of the corresponding object instance.<br/> The implied
     * definition of the ivoId (utype+"/"+id), should be synchronised with the getIvoId() method
     *
     * @param ivoId id to resolve
     * @param type class of the metadata object
     *
     * @return primary key
     */
    public static Long resolveIvoId(final String ivoId, final Class<?> type) {
        if (ivoId == null) {
            return null;
        }
        ObjectClassType md = MetaModelFactory.getInstance().getObjectClassType(type);
        return resolveIvoId(ivoId, md);
    }

    /**
     * resolve incoming ivoId for the given ObjectClassType. <br/>
     * Method is recrsive, if id is not resolved for specfied class, subclasses are searched.
     * @param ivoId id to resolve
     * @param md object class type
     * @return primary key 
     */
    public static Long resolveIvoId(final String ivoId, final ObjectClassType md) {
        if (ivoId == null) {
            return null;
        }
        String utype = md.getObjectType().getUtype();

        if (utype.charAt(utype.length() - 1) != '/') {
            // this test should not be necessary, but is safe
            utype += "/";
        }

        if (!ivoId.startsWith(utype)) {
            for (ObjectClassType subclass : md.getSubclasses()) {
                final Long id = resolveIvoId(ivoId, subclass);
                if (id != null) {
                    return id;
                }
            }
            return null;
        }
        return Long.valueOf(ivoId.substring(utype.length()));
    }
}
//~ End of file --------------------------------------------------------------------------------------------------------
